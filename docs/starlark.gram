# PEG grammar for starlark
# Grammar spec refer to https://www.python.org/dev/peps/pep-0617/


file: a=[statements] ENDMARKER
interactive: a=statement_newline
eval: a=expressions NEWLINE* ENDMARKER

statements: a=statement+
statement: a=compound_stmt | a=simple_stmts
statement_newline:
    | a=compound_stmt NEWLINE
    | simple_stmts
    | NEWLINE
    | ENDMARKER
simple_stmts:
    | a=simple_stmt !';' NEWLINE  # Not needed, there for speedup
    | a=';'.simple_stmt+ [';'] NEWLINE
# NOTE: assignment MUST precede expression, else parsing a simple assignment
# will throw a SyntaxError.
simple_stmt:
    | assignment
    | e=star_expressions
    | &'return' return_stmt
    | 'pass'
    | 'break'
    | 'continue'
compound_stmt:
    | &('def') function_def
    | &'if' if_stmt
    | &('for') for_stmt
    | &'try' try_stmt
    | &'while' while_stmt

assignment:
    | a=NAME ':' b=expression c=['=' d=annotated_rhs ]
    | a=('(' b=single_target ')'
         | single_subscript_attribute_target) ':' b=expression c=['=' d=annotated_rhs ]
    | a=(z=star_targets '=' )+ b=(star_expressions) !'='
    | a=single_target b=augassign ~ c=(star_expressions)
    | invalid_assignment

augassign:
    | '+='
    | '-='
    | '*='
    | '@='
    | '/='
    | '%='
    | '&='
    | '|='
    | '^='
    | '<<='
    | '>>='
    | '**='
    | '//='


if_stmt:
    | 'if' a=expression ':' b=block c=elif_stmt
    | 'if' a=expression ':' b=block c=[else_block]
elif_stmt:
    | 'elif' a=expression ':' b=block c=elif_stmt
    | 'elif' a=expression ':' b=block c=[else_block]
else_block: 'else' ':' b=block

while_stmt:
    | 'while' a=expression ':' b=block c=[else_block]

for_stmt:
    | 'for' t=star_targets 'in' ~ ex=star_expressions ':' b=block el=[else_block]
    | invalid_for_target


return_stmt:
    | 'return' a=[star_expressions]

function_def:
    | 'def' n=NAME '(' params=[params] ')' ':' b=block

params:
    | invalid_parameters
    | parameters

parameters:
    | a=param_no_default+ b=param_with_default* c=[star_etc]
    | a=param_with_default+ b=[star_etc]
    | a=star_etc


star_etc:
    | '*' a=param_no_default b=param_maybe_default* c=[kwds]
    | '*' ',' b=param_maybe_default+ c=[kwds]
    | a=kwds
    | invalid_star_etc

kwds: '**' a=param_no_default

# One parameter.  This *includes* a following comma and type comment.
#
# There are three styles:
# - No default
# - With default
# - Maybe with default
#
# There are two alternative forms of each, to deal with type comments:
# - Ends in a comma followed by an optional type comment
# - No comma, optional type comment, must be followed by close paren
# The latter form is for a final parameter without trailing comma.
#
param_no_default:
    | a=param ','
    | a=param &')'
param_with_default:
    | a=param c=default ','
    | a=param c=default &')'
param_maybe_default:
    | a=param c=default? ','
    | a=param c=default? &')'
param: a=NAME

default: '=' a=expression


block:
    | NEWLINE INDENT a=statements DEDENT
    | simple_stmts
    | invalid_block

star_expressions:
    | a=star_expression b=(',' c=star_expression )+ [',']
    | a=star_expression ','
    | star_expression
star_expression:
    | '*' a=bitwise_or
    | expression

annotated_rhs: star_expressions

expressions:
    | a=expression b=(',' c=expression)+ [',']
    | a=expression ','
    | expression
expression:
    | a=disjunction 'if' b=disjunction 'else' c=expression
    | disjunction
    | lambdef

lambdef:
    | 'lambda' a=[lambda_params] ':' b=expression

lambda_params:
    | invalid_lambda_parameters
    | lambda_parameters

# lambda_parameters etc. duplicates parameters but without annotations
# or type comments, and if there's no comma after a parameter, we expect
# a colon, not a close parenthesis.  (For more, see parameters above.)
#
lambda_parameters:
    | a=lambda_param_no_default+ b=lambda_param_with_default* c=[lambda_star_etc]
    | a=lambda_param_with_default+ b=[lambda_star_etc]
    | a=lambda_star_etc

lambda_star_etc:
    | '*' a=lambda_param_no_default b=lambda_param_maybe_default* c=[lambda_kwds]
    | '*' ',' b=lambda_param_maybe_default+ c=[lambda_kwds]
    | a=lambda_kwds
    | invalid_lambda_star_etc

lambda_kwds: '**' a=lambda_param_no_default

lambda_param_no_default:
    | a=lambda_param ','
    | a=lambda_param &':'
lambda_param_with_default:
    | a=lambda_param c=default ','
    | a=lambda_param c=default &':'
lambda_param_maybe_default:
    | a=lambda_param c=default? ','
    | a=lambda_param c=default? &':'
lambda_param: a=NAME

disjunction:
    | a=conjunction b=('or' c=conjunction )+
    | conjunction
conjunction:
    | a=inversion b=('and' c=inversion )+
    | inversion
inversion:
    | 'not' a=inversion
    | comparison
comparison:
    | a=bitwise_or b=compare_op_bitwise_or_pair+
    | bitwise_or
compare_op_bitwise_or_pair:
    | eq_bitwise_or
    | noteq_bitwise_or
    | lte_bitwise_or
    | lt_bitwise_or
    | gte_bitwise_or
    | gt_bitwise_or
    | notin_bitwise_or
    | in_bitwise_or
    | isnot_bitwise_or
    | is_bitwise_or
eq_bitwise_or: '==' a=bitwise_or
noteq_bitwise_or: (tok='!=') a=bitwise_or
lte_bitwise_or: '<=' a=bitwise_or
lt_bitwise_or: '<' a=bitwise_or
gte_bitwise_or: '>=' a=bitwise_or
gt_bitwise_or: '>' a=bitwise_or
notin_bitwise_or: 'not' 'in' a=bitwise_or
in_bitwise_or: 'in' a=bitwise_or
isnot_bitwise_or: 'is' 'not' a=bitwise_or
is_bitwise_or: 'is' a=bitwise_or

bitwise_or:
    | a=bitwise_or '|' b=bitwise_xor
    | bitwise_xor
bitwise_xor:
    | a=bitwise_xor '^' b=bitwise_and
    | bitwise_and
bitwise_and:
    | a=bitwise_and '&' b=shift_expr
    | shift_expr
shift_expr:
    | a=shift_expr '<<' b=sum
    | a=shift_expr '>>' b=sum
    | sum

sum:
    | a=sum '+' b=term
    | a=sum '-' b=term
    | term
term:
    | a=term '*' b=factor
    | a=term '/' b=factor
    | a=term '//' b=factor
    | a=term '%' b=factor
    | a=term '@' b=factor
    | factor
factor:
    | '+' a=factor
    | '-' a=factor
    | '~' a=factor
    | power
power:
    | a=await_primary '**' b=factor
    | await_primary
await_primary:
    | AWAIT a=primary
    | primary
primary:
    | invalid_primary  # must be before 'primay genexp' because of invalid_genexp
    | a=primary '.' b=NAME
    | a=primary b=genexp
    | a=primary '(' b=[arguments] ')'
    | a=primary '[' b=slices ']'
    | atom

slices:
    | a=slice !','
    | a=','.slice+ [',']
slice:
    | a=[expression] ':' b=[expression] c=[':' d=[expression]]
    | a=expression
atom:
    | NAME
    | 'True'
    | 'False'
    | 'None'
    | &STRING strings
    | NUMBER
    | &'(' (tuple | group | genexp)
    | &'[' (list | listcomp)
    | &'{' (dict | dictcomp)
    | '...'

strings: a=STRING+
list:
    | '[' a=[star_expressions] ']'
listcomp:
    | '[' a=expression ~ b=for_if_clauses ']'
    | invalid_comprehension
tuple:
    | '(' a=[y=star_expression ',' z=[star_expressions] ] ')'
group:
    | '(' a=(expression) ')'
    | invalid_group
genexp:
    | '(' a=expression ~ b=for_if_clauses ')'
    | invalid_comprehension
dict:
    | '{' a=[double_starred_kvpairs] '}'
dictcomp:
    | '{' a=kvpair b=for_if_clauses '}'
    | invalid_dict_comprehension
double_starred_kvpairs: a=','.double_starred_kvpair+ [',']
double_starred_kvpair:
    | '**' a=bitwise_or
    | kvpair
kvpair: a=expression ':' b=expression
for_if_clauses:
    | a=for_if_clause+
for_if_clause:
    | 'for' a=star_targets 'in' ~ b=disjunction c=('if' z=disjunction )*
    | invalid_for_target

arguments:
    | a=args [','] &')'
    | invalid_arguments
args:
    | a=','.(starred_expression | expression !'=')+ b=[',' k=kwargs]
    | a=kwargs
kwargs:
    | a=','.kwarg_or_starred+ ',' b=','.kwarg_or_double_starred+
    | ','.kwarg_or_starred+
    | ','.kwarg_or_double_starred+
starred_expression:
    | '*' a=expression
kwarg_or_starred:
    | a=NAME '=' b=expression
    | a=starred_expression
    | invalid_kwarg
kwarg_or_double_starred:
    | a=NAME '=' b=expression
    | '**' a=expression
    | invalid_kwarg

# NOTE: star_targets may contain *bitwise_or, targets may not.
star_targets:
    | a=star_target !','
    | a=star_target b=(',' c=star_target )* [',']
star_targets_seq: a=','.star_target+ [',']
star_target:
    | '*' a=(!'*' star_target)
    | a=t_primary '.' b=NAME !t_lookahead
    | a=t_primary '[' b=slices ']' !t_lookahead
    | star_atom
star_atom:
    | a=NAME
    | '(' a=star_target ')'
    | '(' a=[star_targets_seq] ')'
    | '[' a=[star_targets_seq] ']'

single_target:
    | single_subscript_attribute_target
    | a=NAME
    | '(' a=single_target ')'
single_subscript_attribute_target:
    | a=t_primary '.' b=NAME !t_lookahead
    | a=t_primary '[' b=slices ']' !t_lookahead

targets: a=','.target+ [',']
target:
    | a=t_primary '.' b=NAME !t_lookahead
    | a=t_primary '[' b=slices ']' !t_lookahead
    | t_atom
t_primary:
    | a=t_primary '.' b=NAME &t_lookahead
    | a=t_primary '[' b=slices ']' &t_lookahead
    | a=t_primary b=genexp &t_lookahead
    | a=t_primary '(' b=[arguments] ')' &t_lookahead
    | a=atom &t_lookahead
t_lookahead: '(' | '[' | '.'
t_atom:
    | a=NAME
    | '(' a=target ')'
    | '(' b=[targets] ')'
    | '[' b=[targets] ']'


# From here on, there are rules for invalid syntax with specialised error messages
invalid_arguments:
    | args ',' '*'
    | a=expression for_if_clauses ',' [args | expression for_if_clauses]
    | a=args for_if_clauses
    | args ',' a=expression for_if_clauses
    | a=args ',' args
invalid_kwarg:
    | a=expression '='
invalid_assignment:
    | a=invalid_ann_assign_target ':' expression
    | a=star_expression ',' star_expressions* ':' expression
    | a=expression ':' expression
    | (star_targets '=')* a=star_expressions '='
    | a=star_expressions augassign (star_expressions)
invalid_ann_assign_target:
    | list
    | tuple
    | '(' a=invalid_ann_assign_target ')'
invalid_block:
    | NEWLINE !INDENT
invalid_primary:
    | primary a='{'
invalid_comprehension:
    | ('[' | '(' | '{') a=starred_expression for_if_clauses
invalid_dict_comprehension:
    | '{' a='**' bitwise_or for_if_clauses '}'
invalid_parameters:
    | param_no_default* (param_with_default+) param_no_default
invalid_lambda_parameters:
    | lambda_param_no_default* (lambda_param_with_default+) lambda_param_no_default
invalid_star_etc:
    | '*' (')' | ',' (')' | '**'))
    | '*' ','
invalid_lambda_star_etc:
    | '*' (':' | ',' (':' | '**'))
invalid_with_item:
    | expression 'as' a=expression

invalid_for_target:
    | 'for' a=star_expressions

invalid_group:
    | '(' a=starred_expression ')'
